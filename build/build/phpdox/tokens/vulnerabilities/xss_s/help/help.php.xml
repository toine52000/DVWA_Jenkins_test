<?xml version="1.0"?>
<source xmlns="http://xml.phpdox.net/token">
  <file xmlns="http://xml.phpdox.net/src" path="/home/user/Documents/DVWA-master/build/../src/vulnerabilities/xss_s/help" file="help.php" realpath="/home/user/Documents/DVWA-master/src/vulnerabilities/xss_s/help/help.php" size="2648" time="2017-02-13T08:45:28+00:00" unixtime="1486975528" sha1="0479703d25c03bda6b6299db2e98f20af73dcf2f" relative="vulnerabilities/xss_s/help/help.php"/>
  <line no="1">
    <token name="T_INLINE_HTML">&lt;div class="body_padded"&gt;</token>
  </line>
  <line no="2">
    <token name="T_INLINE_HTML">	&lt;h1&gt;Help - Cross Site Scripting (Stored)&lt;/h1&gt;</token>
  </line>
  <line no="3"/>
  <line no="4">
    <token name="T_INLINE_HTML">	&lt;div id="code"&gt;</token>
  </line>
  <line no="5">
    <token name="T_INLINE_HTML">	&lt;table width='100%' bgcolor='white' style="border:2px #C0C0C0 solid"&gt;</token>
  </line>
  <line no="6">
    <token name="T_INLINE_HTML">	&lt;tr&gt;</token>
  </line>
  <line no="7">
    <token name="T_INLINE_HTML">	&lt;td&gt;&lt;div id="code"&gt;</token>
  </line>
  <line no="8">
    <token name="T_INLINE_HTML">		&lt;p&gt;"Cross-Site Scripting (XSS)" attacks are a type of injection problem, in which malicious scripts are injected into the otherwise benign and trusted web sites.</token>
  </line>
  <line no="9">
    <token name="T_INLINE_HTML">			XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script,</token>
  </line>
  <line no="10">
    <token name="T_INLINE_HTML">			to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application using input from a user in the output,</token>
  </line>
  <line no="11">
    <token name="T_INLINE_HTML">			without validating or encoding it.&lt;/p&gt;</token>
  </line>
  <line no="12"/>
  <line no="13">
    <token name="T_INLINE_HTML">		&lt;p&gt;An attacker can use XSS to send a malicious script to an unsuspecting user. The end user's browser has no way to know that the script should not be trusted,</token>
  </line>
  <line no="14">
    <token name="T_INLINE_HTML">			and will execute the JavaScript. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other</token>
  </line>
  <line no="15">
    <token name="T_INLINE_HTML">			sensitive information retained by your browser and used with that site. These scripts can even rewrite the content of the HTML page.&lt;/p&gt;</token>
  </line>
  <line no="16"/>
  <line no="17">
    <token name="T_INLINE_HTML">		&lt;p&gt;The XSS is stored in the database. The XSS is permanent, until the database is reset or the payload is manually deleted.&lt;/p&gt;</token>
  </line>
  <line no="18"/>
  <line no="19">
    <token name="T_INLINE_HTML">		&lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;</token>
  </line>
  <line no="20"/>
  <line no="21">
    <token name="T_INLINE_HTML">		&lt;h3&gt;Objective&lt;/h3&gt;</token>
  </line>
  <line no="22">
    <token name="T_INLINE_HTML">		&lt;p&gt;Redirect everyone to a web page of your choosing.&lt;/p&gt;</token>
  </line>
  <line no="23"/>
  <line no="24">
    <token name="T_INLINE_HTML">		&lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;</token>
  </line>
  <line no="25"/>
  <line no="26">
    <token name="T_INLINE_HTML">		&lt;h3&gt;Low Level&lt;/h3&gt;</token>
  </line>
  <line no="27">
    <token name="T_INLINE_HTML">		&lt;p&gt;Low level will not check the requested input, before including it to be used in the output text.&lt;/p&gt;</token>
  </line>
  <line no="28">
    <token name="T_INLINE_HTML">		&lt;pre&gt;Spoiler: &lt;span class="spoiler"&gt;Either name or message field: &amp;lt;script&amp;gt;alert("XSS");&amp;lt;/script&amp;gt;&lt;/span&gt;.&lt;/pre&gt;</token>
  </line>
  <line no="29"/>
  <line no="30">
    <token name="T_INLINE_HTML">		&lt;br /&gt;</token>
  </line>
  <line no="31"/>
  <line no="32">
    <token name="T_INLINE_HTML">		&lt;h3&gt;Medium Level&lt;/h3&gt;</token>
  </line>
  <line no="33">
    <token name="T_INLINE_HTML">		&lt;p&gt;The developer had added some protection, however hasn't done every field the same way.&lt;/p&gt;</token>
  </line>
  <line no="34">
    <token name="T_INLINE_HTML">		&lt;pre&gt;Spoiler: &lt;span class="spoiler"&gt;name field: &amp;lt;sCriPt&amp;gt;alert("XSS");&amp;lt;/sCriPt&amp;gt;&lt;/span&gt;.&lt;/pre&gt;</token>
  </line>
  <line no="35"/>
  <line no="36">
    <token name="T_INLINE_HTML">		&lt;br /&gt;</token>
  </line>
  <line no="37"/>
  <line no="38">
    <token name="T_INLINE_HTML">		&lt;h3&gt;High Level&lt;/h3&gt;</token>
  </line>
  <line no="39">
    <token name="T_INLINE_HTML">		&lt;p&gt;The developer believe they have disabled all script usage by removing the pattern "&amp;lt;s*c*r*i*p*t".&lt;/p&gt;</token>
  </line>
  <line no="40">
    <token name="T_INLINE_HTML">		&lt;pre&gt;Spoiler: &lt;span class="spoiler"&gt;HTML events&lt;/span&gt;.&lt;/pre&gt;</token>
  </line>
  <line no="41"/>
  <line no="42">
    <token name="T_INLINE_HTML">		&lt;br /&gt;</token>
  </line>
  <line no="43"/>
  <line no="44">
    <token name="T_INLINE_HTML">		&lt;h3&gt;Impossible Level&lt;/h3&gt;</token>
  </line>
  <line no="45">
    <token name="T_INLINE_HTML">		&lt;p&gt;Using inbuilt PHP functions (such as "</token>
    <token name="T_OPEN_TAG">&lt;?php </token>
    <token name="T_ECHO">echo</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dvwaExternalLinkUrlGet</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'https://secure.php.net/manual/en/function.htmlspecialchars.php'</token>
    <token name="T_PHPDOX_COMMA">,</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'htmlspecialchars()'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CLOSE_TAG">?&gt;</token>
    <token name="T_INLINE_HTML">"),</token>
  </line>
  <line no="46">
    <token name="T_INLINE_HTML">			its possible to escape any values which would alter the behaviour of the input.&lt;/p&gt;</token>
  </line>
  <line no="47">
    <token name="T_INLINE_HTML">	&lt;/div&gt;&lt;/td&gt;</token>
  </line>
  <line no="48">
    <token name="T_INLINE_HTML">	&lt;/tr&gt;</token>
  </line>
  <line no="49">
    <token name="T_INLINE_HTML">	&lt;/table&gt;</token>
  </line>
  <line no="50"/>
  <line no="51">
    <token name="T_INLINE_HTML">	&lt;/div&gt;</token>
  </line>
  <line no="52"/>
  <line no="53">
    <token name="T_INLINE_HTML">	&lt;br /&gt;</token>
  </line>
  <line no="54"/>
  <line no="55">
    <token name="T_INLINE_HTML">	&lt;p&gt;Reference: </token>
    <token name="T_OPEN_TAG">&lt;?php </token>
    <token name="T_ECHO">echo</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_STRING">dvwaExternalLinkUrlGet</token>
    <token name="T_PHPDOX_OPEN_BRACKET">(</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CONSTANT_ENCAPSED_STRING">'https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)'</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_PHPDOX_CLOSE_BRACKET">)</token>
    <token name="T_PHPDOX_SEMICOLON">;</token>
    <token name="T_WHITESPACE"> </token>
    <token name="T_CLOSE_TAG">?&gt;</token>
    <token name="T_INLINE_HTML">&lt;/p&gt;</token>
  </line>
  <line no="56">
    <token name="T_INLINE_HTML">&lt;/div&gt;</token>
  </line>
  <line no="57"/>
</source>
