<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="HTMLPurifier_Lexer_DirectLex" namespace="" name="HTMLPurifier_Lexer_DirectLex" abstract="false" final="false" start="13" end="488">
  <file path="/home/user/Documents/DVWA-master/build/../src/external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/Lexer" file="DirectLex.php" realpath="/home/user/Documents/DVWA-master/src/external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/Lexer/DirectLex.php" size="20489" time="2017-02-13T08:45:29+00:00" unixtime="1486975529" sha1="f8d9b641ab85d72066c29516d90070f17b1ba9b2" relative="external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/Lexer/DirectLex.php"/>
  <docblock>
    <description compact="Our in-house implementation of a parser.">A pure PHP parser, DirectLex has absolutely no dependencies, making
it a reasonably good default for PHP4.  Written with efficiency in mind,
it can be four times faster than HTMLPurifier_Lexer_PEARSax3, although it
pales in comparison to HTMLPurifier_Lexer_DOMLex.</description>
    <todo value="Reread XML spec and document differences."/>
  </docblock>
  <extends full="HTMLPurifier_Lexer" namespace="" name="HTMLPurifier_Lexer"/>
  <member name="tracksLineNumbers" type="boolean" default="true" visibility="public" static="false" line="16"/>
  <member name="_whitespace" type="string" default="&quot;\x20\x09\x0D\x0A&quot;" visibility="protected" static="false" line="21">
    <docblock>
      <description compact="Whitespace characters for str(c)spn."/>
    </docblock>
  </member>
  <method name="scriptCallback" start="27" end="29" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Callback function for script CDATA fudge"/>
      <param description="form of array(opening tag, contents, closing tag)" variable="$matches" type="object">
        <type full="in" namespace="" name="in"/>
      </param>
    </docblock>
    <parameter name="matches" byreference="false" type="{unknown}"/>
  </method>
  <method name="tokenizeHTML" start="31" end="318" abstract="false" final="false" static="false" visibility="public">
    <parameter name="html" byreference="false" type="{unknown}"/>
    <parameter name="config" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="special normalization for script tags without any armor" line="33"/>
      <comment value="our &quot;armor&quot; heurstic is a &lt; sign any number of whitespaces after" line="34"/>
      <comment value="the first script tag" line="35"/>
      <comment value="our location in the text" line="43"/>
      <comment value="whether or not we're parsing the inside of a tag" line="44"/>
      <comment value="result array" line="45"/>
      <comment value="This is also treated to mean maintain *column* numbers too" line="47"/>
      <comment value="how often to manually recalculate. This will ALWAYS be right," line="68"/>
      <comment value="but it's pretty wasteful. Set to 0 to turn off" line="69"/>
      <comment value="for testing synchronization" line="77"/>
    </inline>
  </method>
  <method name="substrCount" start="323" end="334" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="PHP 5.0.x compatible substr_count that implements offset and length"/>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="{unknown}"/>
  </method>
  <method name="parseAttributeString" start="342" end="486" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Takes the inside of an HTML tag and makes an assoc array of attributes."/>
      <param description="of tag excluding name." variable="$string" type="object">
        <type full="Inside" namespace="" name="Inside"/>
      </param>
      <returns value="Assoc array of attributes."/>
    </docblock>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="config" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="quick typecast" line="343"/>
      <comment value="no attributes" line="345"/>
      <comment value="let's see if we can abort as quickly as possible" line="352"/>
      <comment value="one equal sign, no spaces =&gt; one attribute" line="353"/>
      <comment value="setup loop environment" line="390"/>
      <comment value="return assoc array of attributes" line="391"/>
      <comment value="current position in string (moves forward)" line="392"/>
      <comment value="size of the string (stays the same)" line="393"/>
      <comment value="if we have unquoted attributes, the parser expects a terminating" line="395"/>
      <comment value="space, so let's guarantee that there's always a terminating space." line="396"/>
    </inline>
  </method>
  <parent full="HTMLPurifier_Lexer" namespace="" name="HTMLPurifier_Lexer">
    <member name="tracksLineNumbers" type="boolean" default="false" visibility="public" static="false" line="49">
      <docblock>
        <description compact="Whether or not this lexer implements line-number/column-number tracking.">If it does, set to true.</description>
      </docblock>
    </member>
    <member name="_special_entity2str" type="array" default="" visibility="protected" static="false" line="149">
      <docblock>
        <description compact="Most common entity to raw value conversion table for special entities."/>
      </docblock>
    </member>
    <method name="create" start="68" end="138" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Retrieves or sets the default Lexer as a Prototype Factory.">By default HTMLPurifier_Lexer_DOMLex will be returned. There are
a few exceptions involving special features that only DirectLex
implements.</description>
        <note value="The behavior of this class has changed, rather than accepting">a prototype object, it now accepts a configuration object.
      To specify your own prototype, set %Core.LexerImpl to it.
      This change in behavior de-singletonizes the lexer object.</note>
        <param description="of HTMLPurifier_Config" variable="$config" type="object">
          <type full="Instance" namespace="" name="Instance"/>
        </param>
        <return description="lexer." type="object">
          <type full="Concrete" namespace="" name="Concrete"/>
        </return>
      </docblock>
      <parameter name="config" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="once PHP DOM implements native line numbers, or we" line="130"/>
        <comment value="hack out something using XSLT, remove this stipulation" line="131"/>
      </inline>
    </method>
    <constructor name="__construct" start="142" end="144" abstract="false" final="false" static="false" visibility="public"/>
    <method name="parseData" start="174" end="196" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Parses special entities into the proper characters.">This string will translate escaped versions of the special characters
into the correct ones.</description>
        <warning>You should be able to treat the output of this function as
completely parsed, but that's only because all other entities should
have been handled previously in substituteNonSpecialEntities()</warning>
        <param description="character data to be parsed." variable="$string" type="object">
          <type full="String" namespace="" name="String"/>
        </param>
        <returns value="Parsed character data."/>
      </docblock>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="following functions require at least one character" line="176"/>
        <comment value="subtracts amps that cannot possibly be escaped" line="179"/>
        <comment value="abort if no entities" line="183"/>
        <comment value="code duplication for sake of optimization, see above" line="187"/>
        <comment value="hmm... now we have some uncommon entities. Use the callback." line="193"/>
      </inline>
    </method>
    <method name="tokenizeHTML" start="204" end="206" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Lexes an HTML string into tokens."/>
        <param description="HTML." variable="$string" type="object">
          <type full="String" namespace="" name="String"/>
        </param>
        <return description="array representation of HTML." type="object">
          <type full="HTMLPurifier_Token" namespace="" name="HTMLPurifier_Token"/>
        </return>
      </docblock>
      <parameter name="string" byreference="false" type="{unknown}"/>
      <parameter name="config" byreference="false" type="{unknown}"/>
      <parameter name="context" byreference="false" type="{unknown}"/>
    </method>
    <method name="escapeCDATA" start="214" end="220" abstract="false" final="false" static="true" visibility="protected">
      <docblock>
        <description compact="Translates CDATA sections into regular sections (through escaping)."/>
        <param description="string to process." variable="$string" type="object">
          <type full="HTML" namespace="" name="HTML"/>
        </param>
        <returns value="HTML with CDATA sections escaped."/>
      </docblock>
      <parameter name="string" byreference="false" type="{unknown}"/>
    </method>
    <method name="escapeCommentedCDATA" start="225" end="231" abstract="false" final="false" static="true" visibility="protected">
      <docblock>
        <description compact="Special CDATA case that is especially convoluted for &lt;script&gt;"/>
      </docblock>
      <parameter name="string" byreference="false" type="{unknown}"/>
    </method>
    <method name="CDATACallback" start="242" end="245" abstract="false" final="false" static="true" visibility="protected">
      <docblock>
        <description compact="Callback function for escapeCDATA() that does the work."/>
        <warning value="Though this is public in order to let the callback happen,">calling it directly is not recommended.</warning>
        <params value="$matches PCRE matches array, with index 0 the entire match">and 1 the inside of the CDATA section.</params>
        <returns value="Escaped internals of the CDATA section."/>
      </docblock>
      <parameter name="matches" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="not exactly sure why the character set is needed, but whatever" line="243"/>
      </inline>
    </method>
    <method name="normalize" start="252" end="280" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Takes a piece of HTML and normalizes it by converting entities, fixing encoding, extracting bits, and other good stuff."/>
        <todo value="Consider making protected"/>
      </docblock>
      <parameter name="html" byreference="false" type="{unknown}"/>
      <parameter name="config" byreference="false" type="{unknown}"/>
      <parameter name="context" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="normalize newlines to \n" line="254"/>
        <comment value="escape CDATA" line="263"/>
        <comment value="extract body from document if applicable" line="266"/>
        <comment value="expand entities that aren't the big five" line="271"/>
        <comment value="clean into wellformed UTF-8 string for an SGML context: this has" line="274"/>
        <comment value="to be done after entity expansion because the entities sometimes" line="275"/>
        <comment value="represent non-SGML characters (horror, horror!)" line="276"/>
      </inline>
    </method>
    <method name="extractBody" start="286" end="294" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Takes a string of HTML (fragment or document) and returns the content"/>
        <todo value="Consider making protected"/>
      </docblock>
      <parameter name="html" byreference="false" type="{unknown}"/>
    </method>
  </parent>
</class>
