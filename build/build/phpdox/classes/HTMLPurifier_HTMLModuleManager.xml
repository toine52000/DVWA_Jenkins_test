<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="HTMLPurifier_HTMLModuleManager" namespace="" name="HTMLPurifier_HTMLModuleManager" abstract="false" final="false" start="3" end="401">
  <file path="/home/user/Documents/DVWA-master/build/../src/external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier" file="HTMLModuleManager.php" realpath="/home/user/Documents/DVWA-master/src/external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/HTMLModuleManager.php" size="14992" time="2017-02-13T08:45:29+00:00" unixtime="1486975529" sha1="6f544d78141a17c7395c05df466675bebd0a0165" relative="external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/HTMLModuleManager.php"/>
  <member name="doctypes" visibility="public" static="false" line="9">
    <docblock>
      <description compact="Instance of HTMLPurifier_DoctypeRegistry"/>
    </docblock>
  </member>
  <member name="doctype" visibility="public" static="false" line="14">
    <docblock>
      <description compact="Instance of current doctype"/>
    </docblock>
  </member>
  <member name="attrTypes" visibility="public" static="false" line="19">
    <docblock>
      <description compact="Instance of HTMLPurifier_AttrTypes"/>
    </docblock>
  </member>
  <member name="modules" type="array" default="" visibility="public" static="false" line="25">
    <docblock>
      <description compact="Active instances of modules for the specified doctype are indexed, by name, in this array."/>
    </docblock>
  </member>
  <member name="registeredModules" type="array" default="" visibility="public" static="false" line="32">
    <docblock>
      <description compact="Array of recognized HTMLPurifier_Module instances, indexed by module's class name. This array is usually lazy loaded, but a user can overload a module by pre-emptively registering it."/>
    </docblock>
  </member>
  <member name="userModules" type="array" default="" visibility="public" static="false" line="39">
    <docblock>
      <description compact="List of extra modules that were added by the user using addModule().">These get unconditionally merged into the current doctype, whatever
it may be.</description>
    </docblock>
  </member>
  <member name="elementLookup" type="array" default="" visibility="public" static="false" line="45">
    <docblock>
      <description compact="Associative array of element name to list of modules that have definitions for the element; this array is dynamically filled."/>
    </docblock>
  </member>
  <member name="prefixes" type="array" default="" visibility="public" static="false" line="48">
    <docblock>
      <description compact="List of prefixes we should use for registering small names"/>
    </docblock>
  </member>
  <member name="contentSets" visibility="public" static="false" line="50"/>
  <member name="attrCollections" visibility="public" static="false" line="51"/>
  <member name="trusted" type="boolean" default="false" visibility="public" static="false" line="54">
    <docblock>
      <description compact="If set to true, unsafe elements and attributes will be allowed"/>
    </docblock>
  </member>
  <constructor name="__construct" start="56" end="122" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="editable internal objects" line="58"/>
      <comment value="setup basic modules" line="62"/>
      <comment value="setup basic doctypes" line="76"/>
    </inline>
  </constructor>
  <method name="registerModule" start="145" end="175" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Registers a module to the recognized module list, useful for overloading pre-existing modules."/>
      <param description="string module name, with or without" variable="$module" type="object">HTMLPurifier_HTMLModule prefix, or instance of
               subclass of HTMLPurifier_HTMLModule.<type full="Mixed:" namespace="" name="Mixed:"/></param>
      <param description="whether or not to overload previous modules." variable="$overload" type="object">If this is not set, and you do overload a module,
                 HTML Purifier will complain with a warning.<type full="Boolean" namespace="" name="Boolean"/></param>
      <note value="This function will not call autoload, you must instantiate">(and thus invoke) autoload outside the method.</note>
      <note value="If a string is passed as a module name, different variants">will be tested in this order:
         - Check for HTMLPurifier_HTMLModule_$name
         - Check all prefixes with $name in order they were added
         - Check for literal object name
         - Throw fatal error
      If your object name collides with an internal class, specify
      your module manually. All modules must have been included
      externally: registerModule will not perform inclusions for you!</note>
    </docblock>
    <parameter name="module" byreference="false" type="{unknown}"/>
    <parameter name="overload" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="addModule" start="181" end="185" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a module to the current doctype by first registering it, and then tacking it on to the active doctype"/>
    </docblock>
    <parameter name="module" byreference="false" type="{unknown}"/>
  </method>
  <method name="addPrefix" start="191" end="193" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a class prefix that registerModule() will use to resolve a string name to a concrete class"/>
    </docblock>
    <parameter name="prefix" byreference="false" type="{unknown}"/>
  </method>
  <method name="setup" start="200" end="282" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Performs processing on modules, after being called you may use getElement() and getElements()"/>
      <param description="of HTMLPurifier_Config" variable="$config" type="object">
        <type full="Instance" namespace="" name="Instance"/>
      </param>
    </docblock>
    <parameter name="config" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="generate" line="204"/>
      <comment value="take out the default modules that aren't allowed" line="208"/>
      <comment value="add proprietary module (this gets special treatment because" line="219"/>
      <comment value="it is completely removed from doctypes, etc.)" line="220"/>
      <comment value="add SafeObject/Safeembed modules" line="225"/>
      <comment value="merge in custom modules" line="233"/>
      <comment value="prepare any injectors" line="246"/>
      <comment value="setup lookup table based on all valid modules" line="259"/>
      <comment value="note the different choice" line="269"/>
    </inline>
  </method>
  <method name="processModule" start="288" end="293" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Takes a module and adds it to the active module collection, registering it if necessary."/>
    </docblock>
    <parameter name="module" byreference="false" type="{unknown}"/>
  </method>
  <method name="getElements" start="299" end="318" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieves merged element definitions."/>
      <return description="of HTMLPurifier_ElementDef" type="object">
        <type full="Array" namespace="" name="Array"/>
      </return>
    </docblock>
    <inline>
      <comment value="remove dud elements, this happens when an element that" line="310"/>
      <comment value="appeared to be safe actually wasn't" line="311"/>
    </inline>
  </method>
  <method name="getElement" start="330" end="399" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Retrieves a single merged element definition"/>
      <param description="of element" variable="$name" type="object">
        <type full="Name" namespace="" name="Name"/>
      </param>
      <param description="trusted overriding parameter: set to true" variable="$trusted" type="object">if you want the full version of an element<type full="Boolean" namespace="" name="Boolean"/></param>
      <return description="HTMLPurifier_ElementDef" type="object">
        <type full="Merged" namespace="" name="Merged"/>
      </return>
      <note value="You may notice that modules are getting iterated over twice (once">in getElements() and once here). This
      is because</note>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="trusted" byreference="false" type="{unknown}" default="" constant="null"/>
    <inline>
      <comment value="setup global state variables" line="336"/>
      <comment value="iterate through each module that has registered itself to this" line="340"/>
      <comment value="element" line="341"/>
      <comment value="This can occur if there is a blank definition, but no base to" line="386"/>
      <comment value="mix it in with" line="387"/>
      <comment value="add information on required attributes" line="390"/>
    </inline>
  </method>
</class>
