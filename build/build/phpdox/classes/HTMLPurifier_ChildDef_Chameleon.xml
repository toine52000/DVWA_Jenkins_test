<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="HTMLPurifier_ChildDef_Chameleon" namespace="" name="HTMLPurifier_ChildDef_Chameleon" abstract="false" final="false" start="12" end="46">
  <file path="/home/user/Documents/DVWA-master/build/../src/external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/ChildDef" file="Chameleon.php" realpath="/home/user/Documents/DVWA-master/src/external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/ChildDef/Chameleon.php" size="1575" time="2017-02-13T08:45:29+00:00" unixtime="1486975529" sha1="013c3314be8c00689ffcf9d0d30e10a745d5fcac" relative="external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/ChildDef/Chameleon.php"/>
  <docblock>
    <description compact="Definition that uses different definitions depending on context.">The del and ins tags are notable because they allow different types of
elements depending on whether or not they're in a block or inline context.
Chameleon allows this behavior to happen by using two different
definitions depending on context.  While this somewhat generalized,
it is specifically intended for those two tags.</description>
  </docblock>
  <extends full="HTMLPurifier_ChildDef" namespace="" name="HTMLPurifier_ChildDef"/>
  <member name="inline" visibility="public" static="false" line="18">
    <docblock>
      <description compact="Instance of the definition object to use when inline. Usually stricter."/>
    </docblock>
  </member>
  <member name="block" visibility="public" static="false" line="23">
    <docblock>
      <description compact="Instance of the definition object to use when block."/>
    </docblock>
  </member>
  <member name="type" type="string" default="'chameleon'" visibility="public" static="false" line="25"/>
  <constructor name="__construct" start="31" end="35" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <param description="of elements to allow when inline." variable="$inline" type="object">
        <type full="List" namespace="" name="List"/>
      </param>
      <param description="of elements to allow when block." variable="$block" type="object">
        <type full="List" namespace="" name="List"/>
      </param>
    </docblock>
    <parameter name="inline" byreference="false" type="{unknown}"/>
    <parameter name="block" byreference="false" type="{unknown}"/>
  </constructor>
  <method name="validateChildren" start="37" end="45" abstract="false" final="false" static="false" visibility="public">
    <parameter name="tokens_of_children" byreference="false" type="{unknown}"/>
    <parameter name="config" byreference="false" type="{unknown}"/>
    <parameter name="context" byreference="false" type="{unknown}"/>
  </method>
  <parent full="HTMLPurifier_ChildDef" namespace="" name="HTMLPurifier_ChildDef">
    <member name="type" visibility="public" static="false" line="12">
      <docblock>
        <description compact="Type of child definition, usually right-most part of class name lowercase.">Used occasionally in terms of context.</description>
      </docblock>
    </member>
    <member name="allow_empty" visibility="public" static="false" line="20">
      <docblock>
        <description compact="Bool that indicates whether or not an empty array of children is okay">This is necessary for redundant checking when changes affecting
a child node may cause a parent node to now be disallowed.</description>
      </docblock>
    </member>
    <member name="elements" type="array" default="" visibility="public" static="false" line="25">
      <docblock>
        <description compact="Lookup array of all elements that this definition could possibly allow"/>
      </docblock>
    </member>
    <method name="getNonAutoCloseElements" start="31" end="33" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get lookup of tag names that should not close this element automatically.">All other elements will do so.</description>
      </docblock>
      <parameter name="config" byreference="false" type="{unknown}"/>
    </method>
    <method name="validateChildren" start="45" end="45" abstract="true" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Validates nodes according to definition and returns modification."/>
        <param description="of HTMLPurifier_Token" variable="$tokens_of_children" type="object">
          <type full="Array" namespace="" name="Array"/>
        </param>
        <param description="object" variable="$config" type="object">
          <type full="HTMLPurifier_Config" namespace="" name="HTMLPurifier_Config"/>
        </param>
        <param description="object" variable="$context" type="object">
          <type full="HTMLPurifier_Context" namespace="" name="HTMLPurifier_Context"/>
        </param>
        <return description="true to leave nodes as is" type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
        <return description="false to remove parent node" type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
        <return description="of replacement child tokens" type="array"/>
      </docblock>
      <parameter name="tokens_of_children" byreference="false" type="{unknown}"/>
      <parameter name="config" byreference="false" type="{unknown}"/>
      <parameter name="context" byreference="false" type="{unknown}"/>
    </method>
  </parent>
</class>
